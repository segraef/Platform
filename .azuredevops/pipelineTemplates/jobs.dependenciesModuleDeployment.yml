#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'Custom Deployment Pool'                   |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'ubuntu20.04'                              |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                  | 120                                        |
##   | deploymentBlocks                |                                      | The parameter file(s) to deploy with. Must be provided                                                    | path: 'C:/parameters.json'                 |
##   | location                        | '$(location)'                        | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(resourceGroupName)'               | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection                | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'     |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments       | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'     |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'          |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                    |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  dependsOn: []
  # Logic-related parameters
  deploymentBlocks: ''
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##

jobs:
  - ${{ each deploymentBlock in parameters.deploymentBlocks }}:
      - job: ${{ deploymentBlock.jobName }}
        displayName: ${{ deploymentBlock.displayName }}
        timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
        ${{ if ne( parameters.dependsOn, '') }}:
          dependsOn: ${{ parameters.dependsOn }}
        pool:
          ${{ if ne(parameters.vmImage, '') }}:
            vmImage: ${{ parameters.vmImage }}
          ${{ if ne(parameters.poolName, '') }}:
            name: ${{ parameters.poolName }}

        steps:
          # [Checkout Repositories] task(s)
          #--------------------------------
          - checkout: self

          # [Agent] Prepare environment
          #----------------------------
          - task: PowerShell@2
            displayName: 'Setup agent'
            inputs:
              targetType: inline
              pwsh: true
              script: |
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

                # Define PS modules to install on the runner
                $Modules = @(
                    @{ Name = 'Az.Accounts' },
                    @{ Name = 'Az.Resources' }
                )

                # Set agent up
                Set-EnvironmentOnAgent -PSModules $Modules

          # [Agent] Replace tokens
          #-----------------------
          - task: AzurePowerShell@5
            displayName: 'Replace Tokens [${{ deploymentBlock.path }}] via connection [${{ parameters.serviceConnection }}]'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
              preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
              ScriptType: InlineScript
              pwsh: true
              inline: |
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

                # Load Settings File
                $Settings = Get-Content -Path (Join-Path '$(System.DefaultWorkingDirectory)' 'settings.json') | ConvertFrom-Json -AsHashTable

                # Construct Token Function Input
                $ConvertTokensInputs = @{
                    Tokens      = @{}
                    FilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.modulePath }}' '${{ deploymentBlock.path }}'
                    TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                    TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
                }

                # Add defaults
                $ConvertTokensInputs.Tokens += @{
                  resourceGroupName = '${{ parameters.resourceGroupName }}'
                  subscriptionId    = '${{ parameters.subscriptionId }}'
                  managementGroupId = '${{ parameters.managementGroupId }}'
                  tenantId          = '$(ARM_TENANT_ID)'
                  deploymentSpId    = '$(DEPLOYMENT_SP_ID)'
                }

                # Add local tokens
                if ($Settings.parameterFileTokens.localTokens) {
                  $tokenMap = @{}
                  foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                  }
                  Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                  $ConvertTokensInputs.Tokens += $tokenMap
                }

                # Add custom tokens (passed in via the pipeline)
                if(-not [String]::IsNullOrEmpty('${{ deploymentBlock.customParameterFileTokens }}')) {
                  $customTokens = '${{ deploymentBlock.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
                  Write-Verbose ('Using custom parameter file tokens [{0}]' -f  ($customTokens.Keys -join ', ')) -Verbose
                  $ConvertTokensInputs.Tokens += $customTokens
                }

                # Invoke Token Replacement Functionality
                $null = Convert-TokensInFile @ConvertTokensInputs

          # [Validation] task(s)
          #---------------------
          - task: AzurePowerShell@5
            displayName: 'Validate [${{ deploymentBlock.path }}] via connection [${{ parameters.serviceConnection }}]'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
              preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
              ScriptType: InlineScript
              pwsh: true
              inline: |
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')

                # ----------- #
                # INVOKE TEST #
                # ----------- #
                $functionInput = @{
                  templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ deploymentBlock.templateFilePath }}'
                  parameterFilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '${{ deploymentBlock.path }}'
                  location             = '${{ parameters.location }}'
                  resourceGroupName    = '${{ parameters.resourceGroupName }}'
                  subscriptionId       = '${{ parameters.subscriptionId }}'
                  managementGroupId    = '${{ parameters.managementGroupId }}'
                  additionalParameters = @{}
                }

                $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
                if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
                    $functionInput['additionalParameters'] += @{
                        enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                    }
                }

                Write-Verbose "Invoke task with" -Verbose
                Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                Test-TemplateDeployment @functionInput -Verbose

          # [Deployment] task(s)
          #---------------------
          - task: AzurePowerShell@5
            displayName: 'Deploy [${{ deploymentBlock.path }}] via connection [${{ parameters.serviceConnection }}]'
            name: 'DeployModule'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
              preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
              pwsh: true
              ScriptType: InlineScript
              inline: |
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')

                # ----------------- #
                # INVOKE DEPLOYMENT #
                # ----------------- #
                $functionInput = @{
                  templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ deploymentBlock.templateFilePath }}'
                  parameterFilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '${{ deploymentBlock.path }}'
                  location             = '${{ parameters.location }}'
                  resourceGroupName    = '${{ parameters.resourceGroupName }}'
                  subscriptionId       = '${{ parameters.subscriptionId }}'
                  managementGroupId    = '${{ parameters.managementGroupId }}'
                  doNotThrow           = $true
                  additionalParameters = @{}
                }

                $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
                if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
                    $functionInput['additionalParameters'] += @{
                        enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                    }
                }

                Write-Verbose "Invoke task with" -Verbose
                Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                # Invoke deployment
                $res = New-TemplateDeployment @functionInput -Verbose

                # Get deployment name
                Write-Host ('##vso[task.setvariable variable=deploymentName]{0}' -f $res.deploymentName)

                # Populate further outputs
                $deploymentOutputHash=@{}

                foreach ($outputKey in $res.deploymentOutput.Keys) {
                  Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
                  $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
                }

                $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
                Write-Verbose "Deployment output: $deploymentOutput" -Verbose
                Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'deploymentOutput', $deploymentOutput)

                if ($res.ContainsKey('exception')) {
                  # Happens only if there is an exception
                  throw $res.exception
                }
