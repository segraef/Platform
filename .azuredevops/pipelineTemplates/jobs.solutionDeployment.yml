#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |============================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                               |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure.                                                            | 'demo-internal'                                       |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'Custom Deployment Pool'                              |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'ubuntu20.04'                                         |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline.                                                                 | 120                                                   |
##   | removeDeployment                | 'true'                               | Set to [true] to flag resources for removal. If not provided, defaults to true.                           | 'true'                                                |
##   | templateFilePath                | ''                                   | Path to the template file to deploy.                                                                      | 'arm/Microsoft.AnalysisServices/servers/deploy.bicep' |
##   | customParameterFileTokens       | ''                                   |                                                                                                           |                                                       |
##   | jobDisplayName                  | ''                                   | The display name of the job.                                                                              | 'Deploy module'                                       |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy.                                                                         | 'c:/KeyVault'                                         |
##   | location                        | '$(location)'                        | The location to deploy resources to.                                                                      | 'EastUs2'                                             |
##   | resourceGroupName               | '$(resourceGroupName)'               | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments.                     | 'validation-rg'                                       |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection.               | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'                |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments.      | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'                |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'                     |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                               |
##   |============================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  # Logic-related parameters
  removeDeployment: false
  templateFilePath: ''
  moduleTestFilePath: ''
  customParameterFileTokens: ''
  modulePath: '$(modulePath)'
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  subscriptionId: '$(subscriptionId)'
  managementGroupId: '$(managementGroupId)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job: deploy
    displayName: 'Deploying ' # Auto-populated
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    ##---------------------------------------------##
    ## TEMPLATE LOGIC                              ##
    ##---------------------------------------------##
    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # [Multi Repo] Support task
      #--------------------------
      - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
        - task: PowerShell@2
          displayName: Handle Multi-Repo Invocation
          inputs:
            targetType: inline
            pwsh: true
            script: |
              # ---------------------------- #
              # HANDLE MULTI-REPO INVOCATION #
              # ---------------------------- #

              # Handle multiple-repositories
              if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
                Write-Verbose "Multi-Repo Checkout" -Verbose
                $sourceDirectory = '$(Build.Repository.Name)'
                $sourceDirectory = $sourceDirectory.Split('/')[-1]
                $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' ${{ checkoutRepository }} '${{ parameters.modulePath }}'
                Write-Verbose "modulePath: $modulePath" -Verbose
                Write-Verbose "sourceDirectory: $sourceDirectory" -Verbose
              } else {
                Write-Verbose "No Multi-Repo Checkout" -Verbose
                $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.modulePath }}'
                $sourceDirectory = ''
                Write-Verbose "modulePath: $modulePath" -Verbose
                Write-Verbose "sourceDirectory: $sourceDirectory" -Verbose
              }
              Write-Output "##vso[task.setvariable variable=ENVMODULEPATH]$modulePath"
              Write-Output "##vso[task.setvariable variable=ENVSOURCEDIRECTORY]$sourceDirectory"

      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent for deployment'
        enabled: false
        inputs:
          targetType: inline
          pwsh: true
          script: |
            Write-Output '#########'
            Write-Output '$(Pipeline.Workspace)'
            Write-Output '$(Build.SourcesDirectory)'
            Write-Output '$(System.DefaultWorkingDirectory)'
            Write-Output '$(Build.Repository.LocalPath)'
            Write-Output '$(Build.Repository.Name)'
            Write-Output '$(Build.Repository.ID)'
            Write-Output '$(Build.Repository.Name)'
            Write-Output '$(Build.SourceBranch)'
            # Get-ChildItem -Path '$(System.DefaultWorkingDirectory)' -recurse | select FullName
            Write-Output '#########'

            Write-Output '$(ENVSOURCEDIRECTORY)'

            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.Resources' }
            )

            # Additional PS modules need to be installed for the removal step in case it is enabled
            if ('${{ parameters.removeDeployment}}' -eq 'true') {
              $Modules += @(
                @{ Name = 'Az.CognitiveServices' },
                @{ Name = 'Az.Compute' },
                @{ Name = 'Az.KeyVault' },
                @{ Name = 'Az.Monitor' },
                @{ Name = 'Az.OperationalInsights' },
                @{ Name = 'Az.RecoveryServices' }
              )
            }

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Validation] task(s)
      #---------------------
      - task: AzurePowerShell@5
        displayName: 'Validate template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')

            # Prepare general parameters
            # --------------------------
            $projectSettings = Get-Content -Path '$(ENVSOURCEDIRECTORY)\settings.json' | ConvertFrom-Json

            # Fetching parameters
            $location = '${{ parameters.location }}'
            $resourceGroupName = '${{ parameters.resourceGroupName }}'
            $subscriptionId = '${{ parameters.subscriptionId }}'
            $managementGroupId = '${{ parameters.managementGroupId }}'

            #Prioritizing the bicep file
            $moduleTemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.bicep'
            if (-not (Test-Path $moduleTemplateFilePath)) {
              $moduleTemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.json'
            }

            # $moduleTemplateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVMODULEPATH)' '${{ parameters.templateFilePath }}'
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' '$(environmentPath)' '${{ parameters.moduleTestFilePath }}'

            if ((Split-Path $moduleTemplateFilePath -Extension) -eq '.bicep') {
                $moduleTemplateContent = az bicep build --file $moduleTemplateFilePath --stdout | ConvertFrom-Json -AsHashtable
                $moduleTemplatePossibleParameters = $moduleTemplateContent.parameters.Keys
            } else {
                $moduleTemplatePossibleParameters = ((Get-Content $moduleTemplateFilePath -Raw) | ConvertFrom-Json -AsHashtable).parameters.keys
            }

            # ----------- #
            # INVOKE TEST #
            # ----------- #

            # Building input object
            $functionInput = @{
                templateFilePath     = $moduleTemplateFilePath
                parameterFilePath    = $moduleTestFilePath
                location             = $location
                resourceGroupName    = $resourceGroupName
                subscriptionId       = $subscriptionId
                managementGroupId    = $managementGroupId
                additionalParameters = @{}
            }

            # Handle additional parameters
            # ----------------------------
            if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and ($moduleTemplatePossibleParameters.Keys -contains 'enableDefaultTelemetry')) {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                }
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Test-TemplateDeployment @functionInput -Verbose

      # [Deployment] task(s)
      #---------------------
      - task: AzurePowerShell@5
        name: deployModule
        displayName: 'Deploy template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')

            # Prepare general parameters
            # --------------------------
            $projectSettings = Get-Content -Path '$(ENVSOURCEDIRECTORY)\settings.json' | ConvertFrom-Json

            $location = '${{ parameters.location }}'
            $resourceGroupName = '${{ parameters.resourceGroupName }}'
            $subscriptionId = '${{ parameters.subscriptionId }}'
            $managementGroupId = '${{ parameters.managementGroupId }}'

            #Prioritizing the bicep file
            $moduleTemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.bicep'
            if (-not (Test-Path $moduleTemplateFilePath)) {
              $moduleTemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.json'
            }

            # $moduleTemplateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVMODULEPATH)' '${{ parameters.templateFilePath }}'
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' '$(environmentPath)' '${{ parameters.moduleTestFilePath }}'

            if ((Split-Path $moduleTemplateFilePath -Extension) -eq '.bicep') {
                $moduleTemplateContent = az bicep build --file $moduleTemplateFilePath --stdout | ConvertFrom-Json -AsHashtable
                $moduleTemplatePossibleParameters = $moduleTemplateContent.parameters.Keys
            } else {
                $moduleTemplatePossibleParameters = ((Get-Content $moduleTemplateFilePath -Raw) | ConvertFrom-Json -AsHashtable).parameters.keys
            }

            # ----------- #
            # INVOKE TEST #
            # ----------- #

            # Building input object
            $functionInput = @{
                templateFilePath     = $moduleTemplateFilePath
                parameterFilePath    = $moduleTestFilePath
                location             = $location
                resourceGroupName    = $resourceGroupName
                subscriptionId       = $subscriptionId
                managementGroupId    = $managementGroupId
                additionalParameters = @{}
            }

            # Handle additional parameters
            # ----------------------------
            if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and ($moduleTemplatePossibleParameters.Keys -contains 'enableDefaultTelemetry')) {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                }
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Invoke deployment
            $res = New-TemplateDeployment @functionInput -Verbose

            # Get deployment name
            $deploymentName = $res.deploymentName
            Write-Verbose "Deployment name: $deploymentName" -Verbose
            Write-Host "##vso[task.setvariable variable=deploymentName]$deploymentName"
            Write-Host "##vso[task.setvariable variable=deploymentName;isOutput=true]$deploymentName"

            # Populate further outputs
            $deploymentOutputHash=@{}

            foreach ($outputKey in $res.deploymentOutput.Keys) {
              Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
              $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
            }

            $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
            Write-Verbose "Deployment output: $deploymentOutput" -Verbose
            Write-Output "##vso[task.setvariable variable=deploymentOutput;isOutput=true]$deploymentOutput"

            if ($res.ContainsKey('exception')) {
              # Happens only if there is an exception
              throw $res.exception
            }

      # [Removal] task(s)
      #------------------
      - task: AzurePowerShell@5
        displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
        condition: and(succeededOrFailed(), eq('${{ parameters.removeDeployment }}', 'True'), not(eq(variables['deploymentName'],'')), not(startsWith(variables['deploymentName'], 'variables[' )))
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          ScriptType: InlineScript
          failOnStandardError: false
          pwsh: true
          inline: |
            # Load used function
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(ENVSOURCEDIRECTORY)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

            $functionInput = @{
              TemplateFilePath  = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
              ResourceGroupName = '${{ parameters.resourceGroupName }}'
              subscriptionId    = '${{ parameters.subscriptionId }}'
              ManagementGroupId = '${{ parameters.managementGroupId }}'
              deploymentName    = '$(deploymentName)'
              Verbose           = $true
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Initialize-DeploymentRemoval @functionInput
